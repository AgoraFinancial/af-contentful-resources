[{"/Users/emmills/iterable-email-fields/src/index.js":"1","/Users/emmills/iterable-email-fields/src/App.js":"2","/Users/emmills/iterable-email-fields/src/Lists.js":"3","/Users/emmills/iterable-email-fields/src/Template.js":"4","/Users/emmills/vagrant-local/www/af-contentful-resources/apps/iterable-campaign/src/index.js":"5","/Users/emmills/vagrant-local/www/af-contentful-resources/apps/iterable-campaign/src/App.js":"6","/Users/emmills/vagrant-local/www/af-contentful-resources/apps/iterable-campaign/src/Template.js":"7","/Users/emmills/vagrant-local/www/af-contentful-resources/apps/iterable-campaign/src/Lists.js":"8"},{"size":821,"mtime":1611346881791,"results":"9","hashOfConfig":"10"},{"size":2785,"mtime":1611348133934,"results":"11","hashOfConfig":"10"},{"size":4207,"mtime":1611347736335,"results":"12","hashOfConfig":"10"},{"size":2839,"mtime":1611347766417,"results":"13","hashOfConfig":"10"},{"size":821,"mtime":1611346881791,"results":"14","hashOfConfig":"15"},{"size":2785,"mtime":1611348133934,"results":"16","hashOfConfig":"15"},{"size":2839,"mtime":1611347766417,"results":"17","hashOfConfig":"15"},{"size":4207,"mtime":1611347736335,"results":"18","hashOfConfig":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tzv0ka",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"siv083",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"/Users/emmills/iterable-email-fields/src/index.js",[],"/Users/emmills/iterable-email-fields/src/App.js",[],"/Users/emmills/iterable-email-fields/src/Lists.js",["38"],"/Users/emmills/iterable-email-fields/src/Template.js",["39"],"/Users/emmills/vagrant-local/www/af-contentful-resources/apps/iterable-campaign/src/index.js",[],["40","41"],"/Users/emmills/vagrant-local/www/af-contentful-resources/apps/iterable-campaign/src/App.js",[],"/Users/emmills/vagrant-local/www/af-contentful-resources/apps/iterable-campaign/src/Template.js",["42"],"import { useState, useEffect } from 'react'\n\nimport { Select, Option, Paragraph, Spinner, ValidationMessage, Flex, FormLabel } from '@contentful/forma-36-react-components'\n\nconst Template = ({ initialValue, updateValue, appParameters }) => {\n\n  /**\n   * Setup state/constants\n   */\n  const targetId = 'templateId'\n  const defaultErrorMessage = 'There was an error retrieving the templates.'\n  const [showError, setShowError] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(defaultErrorMessage)\n  const [isProcessing, setIsProcessing] = useState(true)\n  const [options, setOptions] = useState()\n\n  /**\n   * On initial mount, get data from iterable and generate list Id options\n   */\n  useEffect(() => {\n    fetchData(`https://api.iterable.com/api/templates?templateType=Base&messageMedium=Email&apiKey=${appParameters.iterableApiKey}`)\n      .then(data => {\n\n        // Build list of items, filtering by those that include specified tag\n        const array = []\n        for (let i = 0, len = data.templates.length; i < len; i++) {\n          if (appParameters.templateTag && !data.templates[i].name.includes(`${appParameters.templateTag}`)) continue\n          array.push(\n            <Option\n              key={data.templates[i].templateId}\n              value={data.templates[i].templateId}\n            >\n              {data.templates[i].name}\n            </Option>\n          )\n        }\n\n        // Generate error on invalid tag - otherwise proceed\n        if (array.length === 0 ) {\n          setErrorMessage('There are no templates with the provided tag.')\n          setShowError(true)\n        } else {\n          setOptions(array)\n        }\n        \n      })\n      .catch(error => {\n        setErrorMessage(defaultErrorMessage)\n        setShowError(true)\n      })\n      .then(() => {\n        setIsProcessing(false)\n      })\n\n    }, [])\n\n  /**\n   * On select, update parent data and remove invalid options\n   */\n  const handleSelect = value => {\n    if (!value) return\n    updateValue(targetId, parseInt(value, 10))    \n  }\n\n  /**\n   * Build display var\n   */\n  const select = (\n    <Flex>\n      <Select value={initialValue} name={targetId} onChange={event => handleSelect(event.target.value)} required>\n        <Option value=\"\">Select Template</Option>\n        {options}\n      </Select>\n    </Flex>\n  )\n\n  return (\n    <div className=\"template\">\n      <FormLabel htmlFor={targetId}>Template</FormLabel>\n      {isProcessing ? <Paragraph><Spinner /></Paragraph> : null}\n      {!isProcessing && showError ? <ValidationMessage>{errorMessage}</ValidationMessage> : null}\n      {!isProcessing && !showError ? select : null}\n    </div>\n  )\n}\n\n/**\n * Simple fetch async function\n * @param  {str} url\n */\nconst fetchData = async url => {\n  const response = await fetch(url)\n  return response.json()\n}\n\nexport default Template","/Users/emmills/vagrant-local/www/af-contentful-resources/apps/iterable-campaign/src/Lists.js",["43"],"import { useState, useEffect, useCallback } from 'react'\n\nimport { Paragraph, Spinner, ValidationMessage, Autocomplete, Pill, FormLabel } from '@contentful/forma-36-react-components'\n\nconst Lists = ({ initialValue, updateValue, appParameters }) => {\n  \n  /**\n   * Setup state/constants\n   */\n  const targetId = 'listIds'\n  const defaultErrorMessage = 'There was an error retrieving the lists.'\n  const [showError, setShowError] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(defaultErrorMessage)\n  const [isProcessing, setIsProcessing] = useState(true)\n  const [items, setItems] = useState([]);\n  const [filteredItems, setFilteredItems] = useState(items);\n  const [selectedItems, setSelectedItems] = useState(initialValue);\n\n  /**\n   * On initial mount, get data from iterable and generate list Id options\n   */\n  useEffect(() => {\n    fetchData(`https://api.iterable.com/api/lists?apiKey=${appParameters.iterableApiKey}`)\n      .then(data => {\n\n        // Build list of items, filtering by those that include specified tag\n        const array = []\n        for (let i = 0, len = data.lists.length; i < len; i++) {\n          if (appParameters.listTag && !data.lists[i].name.includes(`${appParameters.listTag}`)) continue\n          array.push(\n            {\n              \"value\": data.lists[i].id,\n              \"label\": data.lists[i].name\n            }\n          )\n        }\n\n        // Generate error on invalid tag - otherwise proceed\n        if (array.length === 0 ) {\n          setErrorMessage('There are no lists with the provided tag.')\n          setShowError(true)\n        } else {\n          setItems(array)\n        }\n\n      })\n      .catch(error => {\n        setErrorMessage(defaultErrorMessage)\n        setShowError(true)\n      })\n      .then(() => {\n        setIsProcessing(false)\n      })\n  }, [])\n\n  /**\n   * Update filterable items, removing thos already selected\n   */\n  useEffect(() => {\n    const filtered = items.filter(item => {\n      return !selectedItems.includes(item.value)\n    })\n    setFilteredItems(filtered)\n  }, [items, selectedItems])\n\n  /**\n   * Refilter selected list on input change\n   */\n  const handleQueryChange = useCallback(query => {\n      setFilteredItems(\n        query ? items.filter((item) => item.label.includes(query)) : items,\n      )\n    },\n    [items, setFilteredItems],\n  )\n\n  /**\n   * Add list to selected data\n   */\n  const handleAddList = item => {\n    const array = [...selectedItems, item.value]\n    updateValue(targetId, array)\n    setSelectedItems(array)\n  } \n\n  /**\n   * Remove selections from data array and update\n   */\n  const handleRemoveList = value => {\n    const array = [...selectedItems]\n    const index = array.indexOf(value);\n    array.splice(index, 1);\n    updateValue(targetId, array)\n    setSelectedItems(array)\n  }\n\n  /**\n   * Build search field for lists selection\n   */\n  const listSearch = (\n    <Autocomplete\n      items={filteredItems}\n      onQueryChange={handleQueryChange}\n      onChange={handleAddList}\n      maxHeight={200}\n      placeholder=\"Search Lists\"\n    >\n      {options =>\n        options.map(option => (<span key={option.value}>{option.label}</span>))\n      }\n    </Autocomplete>\n  )\n\n  /**\n   * Build display for selected lists\n   */  \n  const selectedLists = []\n  for (let i = 0, len = selectedItems.length; i < len; i++) {\n    const found = items.find(element => element.value === selectedItems[i]);\n    if (found) {\n      selectedLists.push(\n        <Pill\n          className=\"f36-margin-top--s f36-margin-right--s\"\n          key={found.value}\n          label={found.label}\n          onClose={() => handleRemoveList(found.value)}\n        />\n      )\n    }\n  }\n\n  return (\n    <div className=\"lists\">\n      <FormLabel htmlFor={targetId}>List Ids</FormLabel>\n      {isProcessing ? <Paragraph><Spinner /></Paragraph> : null}\n      {!isProcessing && showError ? <ValidationMessage>{errorMessage}</ValidationMessage> : null}\n      {!isProcessing && !showError ? listSearch : null}\n      {selectedLists}\n    </div>\n  )\n}\n\n/**\n * Simple fetch async function\n * @param  {str} url\n */\nconst fetchData = async url => {\n  const response = await fetch(url)\n  return response.json()\n}\n\nexport default Lists",{"ruleId":"44","severity":1,"message":"45","line":54,"column":6,"nodeType":"46","endLine":54,"endColumn":8,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"48","line":55,"column":8,"nodeType":"46","endLine":55,"endColumn":10,"suggestions":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"44","severity":1,"message":"48","line":55,"column":8,"nodeType":"46","endLine":55,"endColumn":10,"suggestions":"54"},{"ruleId":"44","severity":1,"message":"45","line":54,"column":6,"nodeType":"46","endLine":54,"endColumn":8,"suggestions":"55"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appParameters.iterableApiKey' and 'appParameters.listTag'. Either include them or remove the dependency array.","ArrayExpression",["56"],"React Hook useEffect has missing dependencies: 'appParameters.iterableApiKey' and 'appParameters.templateTag'. Either include them or remove the dependency array.",["57"],"no-native-reassign",["58"],"no-negated-in-lhs",["59"],["60"],["61"],{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"no-global-assign","no-unsafe-negation",{"desc":"64","fix":"66"},{"desc":"62","fix":"67"},"Update the dependencies array to be: [appParameters.iterableApiKey, appParameters.listTag]",{"range":"68","text":"69"},"Update the dependencies array to be: [appParameters.iterableApiKey, appParameters.templateTag]",{"range":"70","text":"71"},{"range":"72","text":"71"},{"range":"73","text":"69"},[1827,1829],"[appParameters.iterableApiKey, appParameters.listTag]",[1855,1857],"[appParameters.iterableApiKey, appParameters.templateTag]",[1855,1857],[1827,1829]]